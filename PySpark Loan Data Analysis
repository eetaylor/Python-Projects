{"cells":[{"cell_type":"code","source":["import urllib.parse\naccess_key = \"AKIAIQ7KZWL55RYDF37A\"   \nsecret_key = \"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\"\nencoded_secret_key = urllib.parse.quote(secret_key, \"\")\naws_bucket_name = \"bia6305bricks\"\nmount_name = \"mount3\"\ndbutils.fs.mount(\"s3n://%s:%s@%s\" % (access_key, encoded_secret_key, aws_bucket_name), \"/mnt/%s\" % mount_name)\n"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"><span class=\"ansired\">Out[</span><span class=\"ansired\">1</span><span class=\"ansired\">]: </span>True\n</div>"]}}],"execution_count":1},{"cell_type":"code","source":["dbutils.fs.ls('/mnt/mount3/')"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"><span class=\"ansired\">Out[</span><span class=\"ansired\">2</span><span class=\"ansired\">]: </span>[FileInfo(path=&apos;dbfs:/mnt/mount3/adult(1).csv&apos;, name=&apos;adult(1).csv&apos;, size=3811655)]\n</div>"]}}],"execution_count":2},{"cell_type":"code","source":["dbutils.fs.ls('/mnt/mount3/')"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"><span class=\"ansired\">Out[</span><span class=\"ansired\">1</span><span class=\"ansired\">]: </span>\n[FileInfo(path=u&apos;dbfs:/mnt/mount3/Marketing.csv&apos;, name=u&apos;Marketing.csv&apos;, size=2989277L),\n FileInfo(path=u&apos;dbfs:/mnt/mount3/adult(1).csv&apos;, name=u&apos;adult(1).csv&apos;, size=3811655L)]\n</div>"]}}],"execution_count":3},{"cell_type":"code","source":["from pyspark.sql.types import StringType, DoubleType, StructField, StructType\nfrom pyspark.sql.functions import col, mean, min, max\nfrom pyspark.sql import functions as F  "],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"]}}],"execution_count":4},{"cell_type":"code","source":["df = sqlContext.read.format('com.databricks.spark.csv').options(header='true', inferSchema='true').load('dbfs:/mnt/mount3/Marketing.csv')\n"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"]}}],"execution_count":5},{"cell_type":"code","source":["df.columns\n"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"><span class=\"ansired\">Out[</span><span class=\"ansired\">3</span><span class=\"ansired\">]: </span>\n[&apos;age&apos;,\n &apos;job&apos;,\n &apos;marital&apos;,\n &apos;education&apos;,\n &apos;default&apos;,\n &apos;balance&apos;,\n &apos;housing&apos;,\n &apos;loan&apos;,\n &apos;contact&apos;,\n &apos;day&apos;,\n &apos;month&apos;,\n &apos;campaign&apos;,\n &apos;y&apos;]\n</div>"]}}],"execution_count":6},{"cell_type":"code","source":["df.where(df['default'] == 'yes').select(['age','job','marital','education','balance','housing','loan','contact','day','month','campaign']).describe().show()\n"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">+-------+-----------------+-------+--------+---------+------------------+-------+----+--------+------------------+-----+------------------+\nsummary|              age|    job| marital|education|           balance|housing|loan| contact|               day|month|          campaign|\n+-------+-----------------+-------+--------+---------+------------------+-------+----+--------+------------------+-----+------------------+\n  count|              815|    815|     815|      815|               815|    815| 815|     815|               815|  815|               815|\n   mean|39.53496932515338|   null|    null|     null|-137.6245398773006|   null|null|    null|16.385276073619632| null|3.1484662576687117|\n stddev| 9.35780386034771|   null|    null|     null| 906.7046775935519|   null|null|    null|  8.56418341029166| null|3.6281447568876475|\n    min|               21| admin.|divorced|  primary|             -8019|     no|  no|cellular|                 1|  apr|                 1|\n    max|               71|unknown|  single|  unknown|             16486|    yes| yes| unknown|                31|  sep|                36|\n+-------+-----------------+-------+--------+---------+------------------+-------+----+--------+------------------+-----+------------------+\n\n</div>"]}}],"execution_count":7},{"cell_type":"code","source":["df.where((df['age'] < 30) & (df['default'] == 'yes' )).groupBy('education').agg(F.count(df.age).alias('Count'), \n                                      F.sum(df['age']).alias('Sum_Age'),\n                                      F.mean(df['age']).alias('Avg_Age'),\n                                      F.mean(df['balance']).alias('Avg_Balance')\n                                     ).orderBy(df['education']).show()"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">+---------+-----+-------+------------------+-------------------+\neducation|Count|Sum_Age|           Avg_Age|        Avg_Balance|\n+---------+-----+-------+------------------+-------------------+\n  primary|   15|    395|26.333333333333332|-279.93333333333334|\nsecondary|   71|   1894|26.676056338028168| -313.4366197183099|\n tertiary|   24|    644|26.833333333333332| -79.91666666666667|\n  unknown|    2|     57|              28.5|              132.0|\n+---------+-----+-------+------------------+-------------------+\n\n</div>"]}}],"execution_count":8},{"cell_type":"code","source":["from pyspark.ml import Pipeline\nfrom pyspark.ml.feature import IndexToString, StringIndexer, VectorIndexer,VectorAssembler, VectorIndexer \nfrom pyspark.ml.feature import  StringIndexer, OneHotEncoder\nfrom pyspark.ml.tuning import CrossValidator, ParamGridBuilder, CrossValidatorModel\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\nfrom pyspark.ml.classification import DecisionTreeClassifier as   DT      # decision tree\nfrom pyspark.ml.classification import RandomForestClassifier, RandomForestClassificationModel              # Random Forest, ofcourse\nfrom pyspark.ml.classification import MultilayerPerceptronClassifier      # feedforward artificial neural network\nfrom pyspark.ml.classification import GBTClassifier                       # gradient-boosted tree \nfrom pyspark.ml.classification import NaiveBayes                          # naive bayes\nfrom pyspark.ml.classification import MultilayerPerceptronClassificationModel \nfrom pyspark.ml.classification import LogisticRegression                 # logistic regression\nfrom pyspark.ml.regression import LinearRegression\nfrom pyspark.ml.regression import LinearRegression                       # Regression problem\nfrom pyspark.ml.regression import GBTRegressor, GBTRegressionModel\nfrom pyspark.ml.regression import DecisionTreeModel\nfrom pyspark.ml.regression import RandomForestRegressor, RandomForestRegressionModel\nfrom pyspark.ml.regression import GeneralizedLinearRegression\nfrom pyspark.ml.feature import PCA                                       # Principal Components Analysis \nfrom pyspark.ml.evaluation import BinaryClassificationEvaluator\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\nfrom pyspark.ml.evaluation import RegressionEvaluator\n\n #------------------------------------------------------------------------------------\n    ## MLLIB library:  API built on top of RDD's\nfrom pyspark.mllib.util import MLUtils\nfrom pyspark.mllib.feature import StandardScaler, StandardScalerModel, HashingTF\nfrom pyspark.mllib.linalg import SparseVector\nfrom pyspark.mllib.regression import LabeledPoint\nfrom pyspark.mllib.classification import LogisticRegressionModel, LogisticRegressionWithSGD\nfrom pyspark.mllib.classification import NaiveBayesModel, NaiveBayes\nfrom pyspark.mllib.classification import SVMModel, SVMWithSGD                  # Support Vector Machine\nfrom pyspark.mllib.tree import DecisionTree, RandomForest, GradientBoostedTrees, GradientBoostedTreesModel \nfrom pyspark.mllib.evaluation import MulticlassMetrics, BinaryClassificationMetrics\nfrom pyspark.mllib.linalg import Vectors, DenseVector\n\n##------------------------------------------------------------------------------------\n\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql import Row\nfrom pyspark.sql.types import DoubleType\nfrom pyspark.sql.functions import lit\nfrom pyspark.sql.functions import avg\nfrom pyspark.sql import DataFrame\nfrom datetime import date, datetime, timedelta\nimport time\nimport matplotlib.pyplot as plt\nimport matplotlib.mlab as mlab \nimport pandas as pd\nimport numpy as np\n#%matplotlib inline"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"]}}],"execution_count":9},{"cell_type":"code","source":["df = sqlContext.read.format('com.databricks.spark.csv').options(header='true', inferSchema='true').load('dbfs:/mnt/mount3/Marketing.csv')"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"]}}],"execution_count":10},{"cell_type":"code","source":["df.dtypes"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"><span class=\"ansired\">Out[</span><span class=\"ansired\">3</span><span class=\"ansired\">]: </span>\n[(&apos;age&apos;, &apos;int&apos;),\n (&apos;job&apos;, &apos;string&apos;),\n (&apos;marital&apos;, &apos;string&apos;),\n (&apos;education&apos;, &apos;string&apos;),\n (&apos;default&apos;, &apos;string&apos;),\n (&apos;balance&apos;, &apos;int&apos;),\n (&apos;housing&apos;, &apos;string&apos;),\n (&apos;loan&apos;, &apos;string&apos;),\n (&apos;contact&apos;, &apos;string&apos;),\n (&apos;day&apos;, &apos;int&apos;),\n (&apos;month&apos;, &apos;string&apos;),\n (&apos;campaign&apos;, &apos;int&apos;),\n (&apos;y&apos;, &apos;string&apos;)]\n</div>"]}}],"execution_count":11},{"cell_type":"code","source":["numeric_features = [t[0] for t in df.dtypes if t[1] in ['int' , 'double' , 'bigint'] ]\nnumeric_features"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"><span class=\"ansired\">Out[</span><span class=\"ansired\">4</span><span class=\"ansired\">]: </span>[&apos;age&apos;, &apos;balance&apos;, &apos;day&apos;, &apos;campaign&apos;]\n</div>"]}}],"execution_count":12},{"cell_type":"code","source":["categorical_features = [t[0] for t in df.dtypes if t[1] == 'string']\ncategorical_features"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"><span class=\"ansired\">Out[</span><span class=\"ansired\">5</span><span class=\"ansired\">]: </span>\n[&apos;job&apos;,\n &apos;marital&apos;,\n &apos;education&apos;,\n &apos;default&apos;,\n &apos;housing&apos;,\n &apos;loan&apos;,\n &apos;contact&apos;,\n &apos;month&apos;,\n &apos;y&apos;]\n</div>"]}}],"execution_count":13},{"cell_type":"code","source":["\nnumeric_features = [t[0] for t in df.dtypes if t[1] == 'int' or t[1] == 'double' or t[1] == 'bigint' and t[0] !=  df.columns[-1] ]\n\ncategorical_features = [t[0] for t in df.dtypes if t[1] == 'string' and t[0] !=  df.columns[-1]]\n\nTarget = df.columns[-1]\n"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"]}}],"execution_count":14},{"cell_type":"code","source":["\nstages = []\n\nprint ('..Converting Target variable into label indices...\\n')\nlabel_stringIdx = StringIndexer(inputCol = Target, outputCol = \"label\")\nstages += [label_stringIdx] \n\nfor col in categorical_features:\n  stringIndexer = StringIndexer(inputCol = col, outputCol = col+'Index')\n  encoder = OneHotEncoder(inputCol = col+'Index', outputCol = col+'classVec')\n  \n  stages += [stringIndexer, encoder]\n\n\n\n\nprint ('..Transforming all features into a vector...\\n')\nassemblerInputs = map(lambda c: c + \"classVec\", categorical_features) + numeric_features\nassembler = VectorAssembler(inputCols=assemblerInputs, outputCol=\"features\")\nstages += [assembler]\n\nprint('\\nCreate ML Pipeline...')\npipe = Pipeline(stages = stages)"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">..Converting Target variable into label indices...\n\n..Transforming all features into a vector...\n\n\nCreate ML Pipeline...\n</div>"]}}],"execution_count":15},{"cell_type":"code","source":["\npipedModel = pipe.fit(df)\ntransformed_data = pipedModel.transform(df)\n\n\nselectedcols = [\"label\", \"features\"] \nmy_data = transformed_data.select(selectedcols)\n\n\nprint('\\nSplit dataset into training and testing sets...')\ntraining, testing = my_data.randomSplit([0.7, 0.3])\n"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">\nSplit dataset into training and testing sets...\n</div>"]}}],"execution_count":16},{"cell_type":"code","source":["training.count(), len(training.columns)"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"><span class=\"ansired\">Out[</span><span class=\"ansired\">9</span><span class=\"ansired\">]: </span>(31411, 2)\n</div>"]}}],"execution_count":17},{"cell_type":"code","source":["testing.count(), len(testing.columns)"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"><span class=\"ansired\">Out[</span><span class=\"ansired\">10</span><span class=\"ansired\">]: </span>(13800, 2)\n</div>"]}}],"execution_count":18},{"cell_type":"code","source":["LR = LogisticRegression(labelCol= 'label', featuresCol= 'features')\n\nLRmodel = LR.fit(training)\n\nLRpredictions = LRmodel.transform(testing)\n\nLRpredictions.columns\n\nprint ('='*100)\nprint ('Confusion Matrix::')\nprint ('\\n')\nLRpredictions.crosstab('label', 'prediction').show()\nprint ('='*100)\nprint ('\\n')\n\n\nevaluator = (MulticlassClassificationEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName = 'accuracy'))\naccuracy = evaluator.evaluate(LRpredictions)\n\nevaluator = MulticlassClassificationEvaluator(labelCol='label', predictionCol='prediction', metricName='f1')  \nF1_score = evaluator.evaluate(LRpredictions)\n\nevaluator = MulticlassClassificationEvaluator(labelCol='label', predictionCol='prediction', metricName='weightedRecall')  \nrecall = evaluator.evaluate(LRpredictions)\n\nprint ('Accuracy = {}'.format(round(accuracy, 5)))\nprint ('F1 score = {}'.format(round(F1_score, 5)))\nprint ('Recall = {}'.format(round(recall, 5)))"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">====================================================================================================\nConfusion Matrix::\n\n\n+----------------+-----+---+\nlabel_prediction|  0.0|1.0|\n+----------------+-----+---+\n             1.0| 1528|137|\n             0.0|12000|135|\n+----------------+-----+---+\n\n====================================================================================================\n\n\nAccuracy = 0.87949\nF1 score = 0.83943\nRecall = 0.87949\n</div>"]}}],"execution_count":19},{"cell_type":"code","source":["GBT = GBTClassifier(labelCol=\"label\", featuresCol=\"features\")\n\nGBTmodel = GBT.fit(training)\n\nGBTpredictions = GBTmodel.transform(testing)\n\nGBTpredictions.columns\n\nprint ('='*100)\nprint ('Confusion Matrix::')\nprint ('\\n')\nGBTpredictions.crosstab('label', 'prediction').show()\nprint ('='*100)\nprint ('\\n')\n\n\nevaluator = (MulticlassClassificationEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName = 'accuracy'))\naccuracy = evaluator.evaluate(GBTpredictions)\n\nevaluator = MulticlassClassificationEvaluator(labelCol='label', predictionCol='prediction', metricName='f1')  \nF1_score = evaluator.evaluate(GBTpredictions)\n\nevaluator = MulticlassClassificationEvaluator(labelCol='label', predictionCol='prediction', metricName='weightedRecall')  \nrecall = evaluator.evaluate(GBTpredictions)\n\nprint ('Accuracy = {}'.format(round(accuracy, 5)))\nprint ('F1 score = {}'.format(round(F1_score, 5)))\nprint ('Recall = {}'.format(round(recall, 5)))\n\n"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">====================================================================================================\nConfusion Matrix::\n\n\n+----------------+-----+---+\nlabel_prediction|  0.0|1.0|\n+----------------+-----+---+\n             1.0| 1538|127|\n             0.0|12007|128|\n+----------------+-----+---+\n\n====================================================================================================\n\n\nAccuracy = 0.87928\nF1 score = 0.83826\nRecall = 0.87928\n</div>"]}}],"execution_count":20},{"cell_type":"code","source":["DT = DT(labelCol=\"label\", featuresCol=\"features\")\nDTmodel = RF.fit(training)\nDTpredictions = RFmodel.transform(testing)\nDTpredictions.columns\n\n## confusion matrix\nprint ('='*100)\nprint ('Confusion Matrix::')\nprint ('\\n')\nDTpredictions.crosstab('label', 'prediction').show()\nprint ('='*100)\nprint ('\\n')\n\nevaluator = (MulticlassClassificationEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName = 'accuracy'))\naccuracy = evaluator.evaluate(DTpredictions)\n\nevaluator = MulticlassClassificationEvaluator(labelCol='label', predictionCol='prediction', metricName='f1')  \nF1_score = evaluator.evaluate(DTpredictions)\n\nevaluator = MulticlassClassificationEvaluator(labelCol='label', predictionCol='prediction', metricName='weightedRecall')  \nrecall = evaluator.evaluate(DTpredictions)\n\nprint ('Accuracy = {}'.format(round(accuracy, 5)))\nprint ('F1 score = {}'.format(round(F1_score, 5)))\nprint ('Recall = {}'.format(round(recall, 5)))\n"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">====================================================================================================\nConfusion Matrix::\n\n\n+----------------+-----+---+\nlabel_prediction|  0.0|1.0|\n+----------------+-----+---+\n             1.0| 1559|106|\n             0.0|12040| 95|\n+----------------+-----+---+\n\n====================================================================================================\n\n\nAccuracy = 0.88014\nF1 score = 0.83654\nRecall = 0.88014\n</div>"]}}],"execution_count":21}],"metadata":{"name":"BIA6305-Python","notebookId":1128702108630547},"nbformat":4,"nbformat_minor":0}
